<h1>
multithreading - Thread not printing everything after notifyAll in java - Stack Overflow
<\h1>
<pre><code>class Lock implements Runnable{
  int i=0;
  public synchronized void run(){
    for(i=0;i&lt;10;i++){
        if(Thread.currentThread().getName().equals("t1") &amp;&amp; i == 5)
         {try { this.wait();} catch(InterruptedException ie){}}
        System.out.print(Thread.currentThread().getName()+" ");
        if(Thread.currentThread().getName().equals("t3") &amp;&amp; i == 9)
         this.notifyAll();
  }
 }
}
public class ThreadLock {
 public static void main(String[] args){   
  Lock l = new Lock();
  Thread t1 = new Thread(l);
  Thread t2 = new Thread(l);
  Thread t3 = new Thread(l);
  t1.setName("t1");
  t2.setName("t2");
  t3.setName("t3");
  t1.start();
  t2.start();
  t3.start();
 }
}
</code></pre>
<p>Output is:
t1 t1 t1 t1 t1 t3 t3 t3 t3 t3 t3 t3 t3 t3 t3 t1 t2 t2 t2 t2 t2 t2 t2 t2 t2 t2</p>
<p>t1 is not printing all 10 times after calling notifyAll method.
I ran it many times but every time t1 is printed only 6 times.
Why t1 is not printing all 10 times?
please reply soon</p>
<p><code>i</code> is an instance variable. It's shared by all the threads. It should be a local variable.</p>
<p>When the first thread is awakened, it reacquires the lock, prints its name, increments i, and reevaluates if <code>i &lt; 10</code>. But since the other threads have set <code>i</code> to 10 already, the loop stops.</p>
<p>The problem is that you are sharing the same index <code>i</code> between threads, so when the thread t3 exists and t1 is awaken index <code>i</code> will be <code>10</code> and the for loop in thread t1 will exit.</p>
<p>Try calling .join() on each after starting each thread to make sure each thread completes before the program exits?</p>
<p>While the correct answer is already given by JB Nizet, you might wonder, why this only affects <code>t1</code>:
Every thread is reseting <code>i</code>, when the run method (which is synchronized) is called. </p>
<p>But the moment you RETURN the execution of t1 - it's not going to reset <code>i</code>, since the thread has already started the <code>for</code>-loop.</p>
<pre><code>   i | output
   0 | t1 (FIRST iteration of t1 -&gt; Setting i=0)
   1 | t1
   2 | t1
   3 | t1
   4 | t1
   5 | t1
   0 | t3 (FIRST iteration of t3 -&gt; Setting i = 0)
   1 | t3
   2 | t3
   3 | t3
   4 | t3
   5 | t3
   6 | t3
   7 | t3
   8 | t3
   9 | t3
   0 | t2 (FIRST iteration of t2 -&gt; Setting i = 0)
   1 | t2
   2 | t2
   3 | t2
   4 | t2
   5 | t2
   6 | t2
   7 | t2
   8 | t2
   9 | t2
   9 | t1 (t1 restored, but i=9 now. One more output, program done)
</code></pre>
<p>Note: That's at least what is happening for your described output. I think it might also be possible, that t2 is executed before t3, leading to a different output.</p>