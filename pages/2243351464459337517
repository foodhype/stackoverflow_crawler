<h1>
Will the java process keeps the file open if the Scanner was not closed? - Stack Overflow
<\h1>
<p>I found out that a java process throws this error:</p>
<pre><code>Caused by: java.net.SocketException: Too many open files
</code></pre>
<p>I understand that this could be rectified by increasing the open file limits in Unix, however, I want to find out why the files are not being closed by the Java process in the first place.</p>
<p>I checked the source-code and found below snippet is used to read data from files.</p>
<pre><code>String content = new Scanner(new File("../../example/test.txt"), "UTF-8").useDelimiter("\\A").next();
</code></pre>
<p>I assume that here is the problem as Scanner is not being closed after reading? could this be the issue? Or because a scanner object is not created, it doesn't need to be closed?</p>
<blockquote>
<p>I assume that here is the problem as Scanner is not being closed after reading?</p>
</blockquote>
<p>This is most likely the culprit. A <code>Scanner</code> can be closed implicitly if it is available for garbage collection. However, since it is impossible to predict when the garbage collector will run, you should never rely on this. Instead, you should explicitly close the <code>Scanner</code> when you are finished with it. This means that you should follow this pattern:</p>
<pre><code>Scanner scan = null;

try {
    scan = new Scanner(file);
    String token = scan.next();
    // do something with token
} catch (Exception ex) {
    // print out error message
} finally
    scan.close();
}
</code></pre>
<p>Of course, depending on your exact needs, this might be in a method which simply propagates the exceptions by declaring a throws clause. The main idea is that you need a finally clause <strong>somewhere</strong> to ensure that the <code>Scanner</code> is closed whether or not an exception is ever thrown.</p>
<p>Note that Java 7 introduced "try with resources" which makes it much easier for us to do manage this kind of situation. If you are using Java 7, I suggest that you look into this.</p>
<p>Ensure all file resources are closed after their use. Do not depend on javas garbage collection mechanism to do that. Its a good practice to close all resources once you are done with them.</p>
<p>I case an exception occurs during the course of your program close them in the finally block or if you are using java 7 and above use try-with-resources. </p>