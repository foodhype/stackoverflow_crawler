<h1>
java - Design Patterns: Callback as a method parameter - Stack Overflow
<\h1>
<p>I was wondering if defining a callback for a operation in a method parameter is worse than defining it in the object and setting via setters, concerning about design patterns.</p>
<p>I'm not sure if exists a design pattern regarding callback creations.</p>
<p>For example, let's say that there is some class A, and I want to execute a methodM with some callback.</p>
<pre><code>public class A {
    public interface Callback {
        void onEvent();
    }
    public static methodM(...) {
        // ...
    }
}
</code></pre>
<p>May I do this:</p>
<pre><code>public static void methodM(Callback c) {
    c.onEvent();
}
// ...
A.method(this); // The class that calls the method is the callback!
</code></pre>
<p>Instead of:</p>
<pre><code>public static void setCallback(Callback callback) {
    this.callback = callback;
}
public static void methodM() {
    this.callback.onEvent();
}
// ...
A.setCallback(this); // The class that calls the method is the callback!
A.method(); 
</code></pre>
<p>Note that the fact of the method be static is just to easy the scenario understanding.</p>
<p>So, can I use the first approach as a valid design?</p>
<p>The reason about using the first scenario is to avoid memory leaks as to easy the definition of simple callbacks for multiple execution, since I would have to control a list of callbacks using either lists, observers, etc.</p>
<p>I don't think there is a "Callback pattern", it's too generic.</p>
<p>Yet, many Design patterns use callback, like <a href="http://en.wikipedia.org/wiki/Observer_pattern" rel="nofollow">Observer pattern</a> or <a href="http://en.wikipedia.org/wiki/Visitor_pattern" rel="nofollow">Visitor pattern</a></p>
<p>It will depends of the global architecture of your program</p>
<p>That piece of code</p>
<pre><code>public static void methodM(Callback c) {
    c.onEvent();
}
// ...
A.method(this); // The class that calls the method is the callback!
</code></pre>
<p>does not bother me, it's not something forbidden if presented like this</p>
<p>I dont think its not a matter of patterns but a few principles recommend to store the callback in a classfield.</p>
<ul>
<li>Single-Responsibility-Principle: Dont tell <code>A</code> what he has to do. </li>
<li>Law of Demeter: No one else shall know what is the work <code>A</code> has to do.</li>
<li>Open Close principle: You may like to call the Callback in some other situations someday.</li>
</ul>
<p>There are some other principles, but i think these are the most important.</p>