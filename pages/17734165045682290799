<h1>
multithreading - Java Thread synchronized Deadlock wait(); notifyAll(); - Stack Overflow
<\h1>
<p>Because of Thread using sometimes following code gives result as </p>
<pre><code>waiting...One
waiting...Three
waiting...Two
Notified...Two
Notified...Three
</code></pre>
<p>Then code is running as it met Deadlock. If it gives output first 3 lines as above, why does "<strong>Notified...One</strong>" miss ? Need explanation.... (You can get similar result as above when executing following code several time)</p>
<pre><code>class A{
synchronized void waitThread(String threadName){
    System.out.println("waiting..."+threadName);
    try{
        wait();
    }catch(InterruptedException e){ }
    System.out.println("Notified..."+threadName);
}
synchronized void notifyThread(){
    notifyAll();
}   
}
class T1 extends Thread{
A a;
T1(A r,String n){
    a=r;
    setName(n);
}
public void run(){
    a.waitThread(getName());
}
}
class T2 extends Thread{
A a;
T2(A r,String n){
    a=r;
    setName(n);
}
public void run(){
    a.notifyThread();
}
}
pubic class DemoWait{
public static void main(String args[]){
    A a1=new A();
    T1 t1=new T1(a1,"One");
    T1 t2=new T1(a1,"Two");
    T1 t3=new T1(a1,"Three");

    t1.start();
    t2.start();
    t3.start();

    T2 t=new T2(a1,"Four");
    t.start();
}
}
</code></pre>
<p>You simply have a race condition. It's possible that the thread referenced by the variable <code>t</code> executes <code>notifyAll()</code> before the thread referenced by <code>t1</code> executes the <code>waitThread(..)</code> method. This is not deadlock. Some of your waits just happen after your <code>notifyAll()</code>. </p>
<p>You are facing the problem of <a href="http://en.wikipedia.org/wiki/Spurious_wakeup" rel="nofollow">Spurious wakeup</a>.So what is happening that the thread which is notifying the all other thread might be call earlier of other thread and after that other thread will run and wait for the wake up.Because of spurious wake up some thread complete.</p>
<p>Change your code...</p>
<pre><code>class A{
     boolean flag=true;

     synchronized void waitThread(String threadName){
     System.out.println("waiting..."+threadName);
     try{
       while(flag){
          wait();
        }
      }catch(InterruptedException e){ }
     System.out.println("Notified..."+threadName);
 }

    synchronized void notifyThread(){
      flag=false;
      notifyAll();
   }   }
</code></pre>