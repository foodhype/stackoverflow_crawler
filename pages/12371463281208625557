<h1>
java.util.concurrent - Understanding java executor service shutdown and awaitTermination - Stack Overflow
<\h1>
<p>need to clarify following behaviour. </p>
<p>I have a java app with <code>java.util.concurrent.ExecutorService</code> as follows,</p>
<pre><code>       for (int i = 0; i &lt; thread_count; i++) {
            Runnable worker = new MyThread(batchSize);
            executor.execute(worker);
        }

        executor.shutdown();
        executor.awaitTermination(15, TimeUnit.MINUTES);
        System.out.println("All threads are finished");
</code></pre>
<p>In above code I have 5 threads and those are finished in 10 minutes and it will execute <code>System.out.println("All threads are finished")</code>, event-though <code>executor.awaitTermination(15, TimeUnit.MINUTES)</code> has 15 minutes wait time.</p>
<p>But when I remove <code>executor.shutdown()</code> the program will wait 15 minutes which is specified in <code>executor.awaitTermination(15, TimeUnit.MINUTES)</code> statement, before executing next line. </p>
<p>Can any one explain this behaviour ? Why without shutdown command will wait specified amount of time evengthough all the threads are finished ?</p>
<p>The Javadoc for <a href="http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ExecutorService.html#awaitTermination(long,%20java.util.concurrent.TimeUnit)" rel="nofollow">ExecutorService.awaitTermination</a> says:</p>
<blockquote>
<p><strong>Blocks until all tasks have completed execution after a shutdown request, or the timeout occurs</strong>, or the current thread is
  interrupted, <strong>whichever happens first</strong>.</p>
</blockquote>
<p>So when you call shutdown(): your threads are finished in 10 minutes. Then awaitTermination returns immediately (without waiting for 15 minutes to pass).</p>
<p>But if you remove the call to shutdown(), there's no shutdown request, so awaitTermination does not return until the timeout passes (15 minutes)</p>
<p>The Javadoc for <a href="http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ExecutorService.html#awaitTermination(long,%20java.util.concurrent.TimeUnit)" rel="nofollow"><code>ExecutorService.awaitTermination</code></a> method states:</p>
<blockquote>
<p>Blocks until all tasks have completed execution after a shutdown
  request, or the timeout occurs, or the current thread is interrupted,
  whichever happens first.</p>
</blockquote>