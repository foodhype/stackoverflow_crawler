<h1>
java - What does a "Cannot find symbol" compilation error mean? - Stack Overflow
<\h1>
<p>Please explain the following about "Cannot find symbol" errors:</p>
<ul>
<li>What does the error means?</li>
<li>What things can cause this error?</li>
<li>How does the programmer go about fixing this error?</li>
</ul>
<p><em>This question is designed to be a comprehensive question about "cannot find symbol" compilation errors in Java.</em></p>
<h2>1. What does a "Cannot find symbol" error mean?</h2>
<p>Firstly, it is a <em>compilation error</em><sup>1</sup>.  It means that <em>either</em> there is a problem in your Java source code, <em>or</em> there is a problem in the way that you are compiling it.</p>
<p>Your Java source code consists of the following things:</p>
<ul>
<li>Keywords: like <code>true</code>, <code>false</code>, <code>class</code>, <code>while</code>, and so on.</li>
<li>Literals: like <code>42</code> and <code>'X'</code> and <code>"Hi mum!"</code>.</li>
<li>Operators and other non-alphanumeric tokens: like <code>+</code>, <code>=</code>, <code>{</code>, and so on.</li>
<li>Identifiers: like <code>Reader</code>, <code>i</code>, <code>toString</code>, <code>processEquibalancedElephants</code>, and so on.</li>
<li>Comments and whitespace.</li>
</ul>
<p>A "Cannot find symbol" error is about the identifiers.  When your code is compiled, the compiler needs to work out what each and every identifier in your code means.  </p>
<p>A "Cannot find symbol" error means that the compiler cannot do this.  Your code appears to be referring to something that the compiler doesn't understand.</p>
<h2>2. What can cause a "Cannot find symbol" error?</h2>
<p>As a first order, there is only one cause.  The compiler looked in all of the places where the identifier <em>should</em> be defined, and it couldn't find the definition.  This could be caused by a number of things.  The common ones are as follows:</p>
<ul>
<li>For identifiers in general:
<ul>
<li>Perhaps you spelled the name incorrectly; i.e. <code>StringBiulder</code> instead of <code>StringBuilder</code>.  Java cannot and will not attempt to compensate for bad spelling or typing errors.</li>
<li>Perhaps you got the case wrong; i.e. <code>stringBuilder</code> instead of <code>StringBuilder</code>.  All Java identifiers are case sensitive.</li>
<li>Perhaps you used underscores inappropriately; i.e. <code>mystring</code> and <code>my_string</code> are different.  (If you stick to the Java style rules, you will be largely protected from this mistake ...)</li>
</ul></li>
<li>For identifiers that should refer to variables:
<ul>
<li>Perhaps you forgot to declare the variable.</li>
<li>Perhaps the variable declaration is out of scope at the point you tried to use it.  (See example below)</li>
</ul></li>
<li>For identifiers that should be method names:
<ul>
<li>Perhaps you are trying to refer to an inherited method that wasn't declared in the parent / ancestor classes or interfaces.</li>
</ul></li>
<li>For identifiers that should be class names:
<ul>
<li>Perhaps you forgot to import the class.</li>
<li>Perhaps you used "star" imports, but the class isn't defined in any of the packages that you imported.</li>
</ul></li>
</ul>
<p>The problem is often a combination of the above.  For example, maybe you "star" imported <code>java.io.*</code> and then tried to use the <code>Files</code> class ... which is in <code>java.nio</code> not <code>java.io</code>.  Or maybe you meant to write <code>File</code> ... which <em>is</em> a class in <code>java.io</code>.</p>
<p>There are some other more obscure causes too ... which I will deal with below.</p>
<hr/>
<p>Here is an example of how incorrect variable scoping can lead to a "Cannot find symbol" error:</p>
<pre><code>for (int i = 0; i &lt; strings.size(); i++) {
    if (strings.get(i).equalsIgnoreCase("fnoord")) {
        break;
    }
}
if (i &lt; strings.size()) {
    ...
}
</code></pre>
<p>This will give a "Cannot find symbol" error for <code>i</code> in the <code>if</code> statement.  Though we previously declared <code>i</code>, that declaration is only <em>in scope</em> for the <code>for</code> statement and its body.  The reference to <code>i</code> in the <code>if</code> statement <em>cannot see</em> that declaration of <code>i</code>.  It is <em>out of scope</em>.</p>
<p>(An appropriate correction here might be to move the <code>if</code> statement inside the loop, or to declare <code>i</code> before the start of the loop.)</p>
<h2>3. How do I fix these error ?</h2>
<p>Generally speaking, you start out by figuring out what <em>caused</em> the problem.  Then you <em>think</em> about what your code is supposed to be saying.  Then finally you work out what correction you need to make to your source code to do what you want.</p>
<p>Note that not every "correction" is correct. Consider this:</p>
<pre><code>for (int i = 1; i &lt; 10; i++) {
    for (j = 1; j &lt; 10; j++) {
        ...
    }
}
</code></pre>
<p>Suppose that the compiler says "Cannot find symbol" for <code>j</code>.  There are many ways I could "fix" that:</p>
<ul>
<li>I could change the inner <code>for</code> to <code>for (int j = 1; j &lt; 10; j++)</code> - probably correct.</li>
<li>I could add a declaration for <code>j</code> <em>before</em> the inner <code>for</code> loop, or the outer <code>for</code> loop - possibly correct.</li>
<li>I could change <code>j</code> to <code>i</code> in the inner <code>for</code> loop - probably wrong!</li>
<li>and so on.</li>
</ul>
<p>The point is that you <em>need</em> to understand what your code is trying to do in order to find the right fix.</p>
<h2>4.  Obscure causes</h2>
<p>Here are a couple of cases where the "Cannot find symbol" is seemingly inexplicable ... until you look closer.</p>
<ol>
<li><p><strong>You are looking at the wrong source code</strong>:  It often happens that a new Java programmers don't understand how the Java tool chain works, or haven't implemented a repeatable "build process"; e.g. using an IDE, Ant, Mave, Gradle and so on.  In such a situation, the programmer can end up chasing his tail looking for an illusory error that is <em>actually</em> cause by not recompiling code properly, and the like ...</p></li>
<li><p><strong>Redefining system classes</strong>: I've seen cases where the compiler complains that <code>substring</code> is an unknown symbol in something like the following</p>
<pre><code>String s = ...
String s1 = s.substring(1);
</code></pre>
<p>It turned out that the programmer had created their own version of <code>String</code> and that his version of the class didn't define a <code>substring</code> methods.</p>
<p>Lesson: Don't define your own classes with the same names as common library classes!</p></li>
<li><p><strong>Homoglyphs:</strong>  If you use UTF-8 encoding for your source files, it is possible to have identifiers that <em>look</em> the same, but are in fact different because they contain homoglyphs.   See <a href="http://en.wikipedia.org/wiki/Homoglyph" rel="nofollow">this page</a> for more information.  </p>
<p>You can avoid this by restricting yourself to ASCII or Latin-1 as the source file encoding, and using Java <code>\uxxxx</code> escapes for other characters.</p></li>
</ol>
<hr/>
<p><sup>1 - If, perchance, you <em>do</em> see this in a runtime exception or error message, then either you have configured your IDE to run code with compilation errors, or your application is generating and compiling code .. at runtime.</sup></p>