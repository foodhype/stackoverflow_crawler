<h1>
performance - Retrieve N most relevant objects in Java TreeMap - Stack Overflow
<\h1>
<p>According to <a href="http://stackoverflow.com/questions/109383/how-to-sort-a-mapkey-value-on-the-values-in-java">this question</a> I have ordered a Java <code>Map</code>, as follows:</p>
<pre><code>ValueComparator bvc =  new ValueComparator(originalMap);
Map&lt;String,Integer&gt; sortedMap = new TreeMap&lt;String,Integer&gt;(bvc);
sortedMap.putAll(originalMap);
</code></pre>
<p>Now, I would like to extract the <code>K</code> most relevant values from the map, in top-K fashion. Is there a highly efficient way of doing it without iterating through the map?</p>
<p>P.S., some similar questions (e.g., <a href="http://stackoverflow.com/questions/5911174/finding-key-associated-with-max-value-in-a-java-map">this</a>) ask for a solution to the top-1 retrieval problem.</p>
<p>No, not if you use a <code>Map</code>. You'd have to iterate over it.</p>
<p>Have you considered using a <code>PriorityQueue</code>? It's Java's implementation of a heap. It has efficient operations for insertion of arbitrary elements and for removal of the "minimum". You might think about doing this here. Instead of a <code>Map</code>, you could put them into a <code>PriorityQueue</code> ordered by relevance, with the most relevant as the root. Then, to extract the <em>K</em> most relevant, you'd just pop <em>K</em> elements from the <code>PriorityQueue</code>.</p>
<p>If you need the map-like property (mapping from <code>String</code> to <code>Integer</code>), then you could write a class that internally keeps everything in both a <code>PriorityQueue</code> and a <code>HashMap</code>. When you insert, you insert into both; when you remove the minimal element, you pop from the <code>PriorityQueue</code>, and that then tells you which element you also need to remove from your <code>HashMap</code>. This will still give you log-time inserts and min-removals.</p>