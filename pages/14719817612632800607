<h1>
java - Create JSON String using GSON - Stack Overflow
<\h1>
<p>I am having a class like following,</p>
<pre><code>public class Student {
    public int id;
    public String name;
    public int age;    
}
</code></pre>
<p>Now I want to create new Student,</p>
<pre><code>//while create new student
Student stu = new Student();
stu.age = 25;
stu.name = "Guna";
System.out.println(new Gson().toJson(stu));
</code></pre>
<p>This gives me the following output,</p>
<pre><code>{"id":0,"name":"Guna","age":25} //Here I want string without id, So this is wrong
</code></pre>
<p>So here I want String like</p>
<pre><code>{"name":"Guna","age":25}
</code></pre>
<p>If I want to edit old Student</p>
<pre><code>//While edit old student
Student stu2 = new Student();
stu2.id = 1002;
stu2.age = 25;
stu2.name = "Guna";
System.out.println(new Gson().toJson(stu2));
</code></pre>
<p>Now the output is</p>
<pre><code>{"id":1002,"name":"Guna","age":25} //Here I want the String with Id, So this is correct
</code></pre>
<p>How can I make a JSON String with a field [At some point], without a field [at some point]. </p>
<p>Any help will be highly appreciable.</p>
<p>Thanks. </p>
<p>Better is to use @expose annotation like </p>
<pre><code>public class Student {
    public int id;
    @Expose
    public String name;
    @Expose
    public int age;
}
</code></pre>
<p>And use below method to get Json string from your object</p>
<pre><code>private String getJsonString(Student student) {
    // Before converting to GSON check value of id
    Gson gson = null;
    if (student.id == 0) {
        gson = new GsonBuilder()
        .excludeFieldsWithoutExposeAnnotation()
        .create();
    } else {
        gson = new Gson();
    }
    return gson.toJson(student);
}
</code></pre>
<p>It will ignore id column if that is set to 0, either it will return json string with id field.</p>
<p>You can explore the json tree with gson.</p>
<p>Try something like this :</p>
<pre><code>gson.toJsonTree(stu1).getAsJsonObject().remove("id");
</code></pre>
<p>You can add some properties also :</p>
<pre><code>gson.toJsonTree(stu2).getAsJsonObject().addProperty("id", "100");
</code></pre>
<p>You have two options.</p>
<ul>
<li><p>Use Java's transient keyword which is to indicate that a field should not be serialized. Gson will exclude it automatically. This may not work for you as you want it conditionally.</p></li>
<li><p>Use @Expose annotation for the fields that you want and initialize your Gson builder as following: </p>
<p>Gson gson = new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create();</p></li>
</ul>
<p>So you need to mark name and age fields using @Expose and you need to have two different Gson instances  for the default one which includes all fields and the one above which excludes fields without @Expose annotation.</p>
<pre><code>JsonObject jsObj =  (JsonObject) new Gson().toJsonTree(stu2);
jsObj.remove("age"); // remove field 'age'
jsObj.addProperty("key", "value"); // add field 'key'

System.out.println(jsObj);
</code></pre>
<p>You can manipulate with JsonObject</p>
<p>You should introduce additional field to <code>Student</code> class that will notice <code>GSON</code> about <code>id</code> serialization policy.
Then, you should implement custom serializer that will implement <code>TypeAdapter</code>. In your <code>TypeAdapter</code> implementation according to id serialization policy you will serialize it or not. Then you should register your <code>TypeAdapter</code> in GSON factory:</p>
<pre><code>GsonBuilder gson = new GsonBuilder();
gson.registerTypeAdapter(Student.class, new StudentTypeAdapter());
</code></pre>
<p>Hope this helps.</p>